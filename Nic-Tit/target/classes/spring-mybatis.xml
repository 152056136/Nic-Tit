<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-xsd">  
          
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.litt.*.service" />  
    <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:config.properties" />  
    </bean>
    
    <!-- 连接过程，引入的数据库文件，怎么读取到数据 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"   destroy-method="close">  
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
       <!--  <property name="testOnBorrow" value="true"></property>
        <property name="testOnReturn" value="true" /> -->
    </bean> 
   <!--  配置数据源 -->
   <!--  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"   destroy-method="close">  
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        初始化连接大小  
        <property name="initialSize" value="${initialSize}"></property>  
        连接池最大数量  
        <property name="maxActive" value="${maxActive}"></property>  
        连接池最大空闲  
        <property name="maxIdle" value="${maxIdle}"></property>  
        连接池最小空闲  
        <property name="minIdle" value="${minIdle}"></property>  
        获取连接最大等待时间  
        <property name="maxWait" value="${maxWait}"></property>  
        
        <property name="testOnBorrow" value="true"></property>
        <property name="validationQuery" value="select 1"></property>
        
        <property name="testOnBorrow" value="true"></property>
        <property name="testOnReturn" value="true" />
    </bean>  -->
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mapping/**/*.xml"></property>  
        <!-- 配置别名 --> 
        <property name="typeAliasesPackage" value="com.litt.nic.entity,com.litt.micro.entity">
        	
        </property> 
         

 
    </bean>  
    <!--   配置mybatis mapper接口 -->
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
    <property name="basePackage" value="com.litt.*.mapper" />  
        <!-- 注 意 , 没 有 必 要 去 指 定 SqlSessionFactory 或 SqlSessionTemplate , 
        因 为 MapperScannerConfigurer 将会创建 MapperFactoryBean,之后自动装配。
        但是,如果你使 用了一个 以上的 DataSource ,那 么自动 装配可 能会失效 。这种 情况下 ,
        你可 以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 
        属性来设置正确的 bean 名 称来使用。这就是它如何来配置的,注意 bean 的名称是必须的,而不是 bean 的引用,
        因 此,value 属性在这里替代通常的 ref: -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        
    </bean>  
    <!-- (配置事务管理器)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
      
      
                  
</beans>